1)LINEAR SEARCH(with function)
public class Main
{
    public static int linearSearch(int numbers[],int key){
        for(int i=0;i<numbers.length;i++){
            if(numbers[i]==key){
                return i;
            }
        }
        return -1;
    }
	public static void main(String[] args) {
		int numbers[]={2,4,6,8,10,12,14,16};
		int key = 16;
		int index=linearSearch(numbers,key);
	     if(index==-1){
	         System.out.println("key is not found");
	     }
	     else{
	         System.out.println("key is found at index: "+index);
	     }
	}
}
-----------------------------AND-------------------------------
LINEAR SEARCH(without function)
import java.util.*;
public class Main
{
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int temp=0;
		int numbers[] = new int[5];
		System.out.println("Enter the Array");
		for(int i=0;i<numbers.length;i++){
		    numbers[i]=sc.nextInt();
		}
		System.out.println("Enter the Key to be searched");
		int key=sc.nextInt();
		
		for(int i=0;i<numbers.length;i++){
		    if(numbers[i]==key){
		        System.out.print("key is found at index:"+i);
		        temp=temp+1;
		    }
		}
		if(temp==0){
		    System.out.println("NOT FOUND");
		}
		
		
	}
}
2)Smallest and Largest number
public class Main
{
    public static int getLargest(int numbers[]){
        int largest = Integer.MIN_VALUE;//-infinty
        for(int i=0;i<numbers.length;i++){
            if(largest<numbers[i]){
                largest=numbers[i];
            }
        }
        return largest;
    }
    public static int getSmallest(int numbers[]){
        int smallest = Integer.MAX_VALUE;//+infinty
        for(int i=0;i<numbers.length;i++){
            if(smallest>numbers[i]){
                smallest=numbers[i];
            }
        }
        return smallest;
    }
	public static void main(String[] args) {
		int numbers[]={1,2,6,3,5};
		System.out.print(getLargest(numbers));
		System.out.println();
		System.out.print(getSmallest(numbers));
	}
}
3)BinarySearch:
import java.util.*;
public class Main
{
    public static int binarySearch(int numbers[],int key){
        int start=0,end=numbers.length-1;
        
        while(start<=end){
            int mid =(start+end)/2;
            //comparisons
            if(numbers[mid]==key){
                return mid;
            }
            else if(numbers[mid]<key){
                start=mid+1;
            }
            else{
                end=mid-1;
            }
        }
        return-1;
    }
	public static void main(String[] args) {
	Scanner sc = new Scanner(System.in);
	int numbers[]={2,4,6,8,10,12,14};
	int key=10;
	System.out.println(binarySearch(numbers,key));
	}
}
4)REVERSE ARRAY:
public class Main
{
    public static void reverseArray(int numbers[]){
        int first=0,last=numbers.length-1;
        
        //loop
        while(first<last){
            //swap
            int temp=numbers[first];
            numbers[first]=numbers[last];
            numbers[last]=temp;
            
            first++;
            last--;
        }
    }
	public static void main(String[] args) {
		int numbers[] = {2,4,6,8,10};
		reverseArray(numbers);
		
	    for(int i=0;i<numbers.length;i++){
	        System.out.print(numbers[i]+" ");
	    }
	}
}
-----------------------------------------------------------------
4)PRINT PAIRS
public class Main
{
    public static void printPairs(int numbers[]){
        int tp=0;
        for(int i=0;i<numbers.length;i++){
            int curr=numbers[i];
            for(int j=i+1;j<numbers.length;j++){
                System.out.print("("+curr+","+numbers[j]+")");
                tp++;
            }
            System.out.println();
        }
        System.out.println("Total number of pairs are: "+tp);
    }
	public static void main(String[] args) {
		int numbers[] = {2,4,6,8,10};
		printPairs(numbers);
	}
}
-----------------------------------------------------------------
5)PRINT SUBARRRAYS
public class Main
{
    public static void subArrays(int numbers[]){
        int ts=0;
        for(int i=0;i<numbers.length;i++){
            int start = i;
            
            for(int j=i;j<numbers.length;j++){
                int end = j;
                
                for(int k=start;k<=end;k++){
                    System.out.print(numbers[k]+" ");//printing subarrays
                }
                ts++;
                System.out.println();
            }
            System.out.println();
        }
        System.out.println("Total subarrays are: "+ts);
    }
	public static void main(String[] args) {
		int numbers[] = {2,4,6,8,10};
		subArrays(numbers);
	}
}
-----------------------------------------------------------------
6)MAX SUBARRAY SUM(Brute Force)
public class Main
{
    public static void maxsubArraysSum(int numbers[]){
        int currentSum = 0;
        int maxSum = Integer.MIN_VALUE;
        
        for(int i=0;i<numbers.length;i++){
            int start = i;
            
            for(int j=i;j<numbers.length;j++){
                int end = j;
                currentSum=0;
                for(int k=start;k<=end;k++){
                    //subarray sum
                    currentSum+=numbers[k];
                }
                System.out.println(currentSum);
                
                if(maxSum<currentSum){
                    maxSum=currentSum;
                }
            }
        }
        System.out.println("MAX SUM:"+maxSum);
    }
	public static void main(String[] args) {
		int numbers[] = {1,-2,6,-1,3};
		maxsubArraysSum(numbers);
	}
}